server.port=${SERVER_PORT:8080}
spring.profiles.active=staging

logging.level.root=info

# Spring Actuator
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoints.web.exposure.include=heapdump,health
management.endpoints.web.base-path=/
management.endpoint.health.probes.enabled=true

# datasource
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/oauth_db
spring.datasource.username=${DB_USER:oauth_user}
spring.datasource.password=${DB_PASSWORD:oauth_pwd}
spring.flyway.baseline-on-migrate=true
spring.datasource.hikari.maximum-pool-size=250
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=60000
spring.datasource.hikari.register-mbeans=true
# JPA
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.show-sql=false
spring.jpa.database=postgresql
check-user-scopes=true
# Kafka
spring.kafka.bootstrap-servers=${KAFKA_PRIMARY_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.properties.ssl.endpoint.identification.algorithm=https
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${KAFKA_PRIMARY_KEY}\" password=\"${KAFKA_PRIMARY_SECRET}\";
spring.kafka.properties.security.protocol=${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.properties.request.timeout.ms=${KAFKA_PRIMARY_REQUEST_TIMEOUT_MS:20000}
spring.kafka.properties.retry.backoff.ms=${KAFKA_PRIMARY_RETRY_BACKOFF_MS:500}
spring.kafka.properties.enable.idempotence=true
spring.kafka.properties.retries=5
spring.kafka.properties.acks=all
spring.kafka.properties.specific.avro.reader=true
# Kafka Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=5
spring.kafka.consumer.fetch-min-size=1
spring.kafka.consumer.properties.max.poll.interval.ms=6000000
# Kafka producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1
kamino.kafka.producer.notify.timeout-seconds=5
json.fail.invalid.schema=true
# Schema Registry
spring.kafka.properties.basic.auth.credentials.source=USER_INFO
spring.kafka.properties.schema.registry.url=${KAFKA_PRIMARY_SCHEMA_REGISTRY_ENDPOINT:http://localhost:8081}
spring.kafka.properties.schema.registry.basic.auth.user.info=${KAFKA_PRIMARY_SCHEMA_REGISTRY_KEY:UZD62BD6MBKMQA4Y}:${KAFKA_PRIMARY_SCHEMA_REGISTRY_SECRET:SsCnqXdPePM22Ga3Nv0UpSOU8N37K+Mimo4JAqrhaUX2M91oUnD9P4pufRoAxAYS}
#
aouth2.token.expirationTime.timeMlisencondes=${TOKEN_EXPIRATION_TIME:43200000}

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://locahost:8080/jwt/.well-known/jwks.json
